"""# Definition for a Node.
class Node(object):
    def __init__(self, val, prev, next, child):
        self.val = val
        self.prev = prev
        self.next = next
        self.child = child
"""

class Solution(object):
    def flatten(self, head):
        """
        :type head: Node
        :rtype: Node
        """
        if head is None or (head.next is None and head.child is None):
            return head
        ladder = []
        node = head
        while (node.next is not None or node.child is not None):
            if node.child is not None:
                ladder.append(node)
                node = node.child
            else:
                node = node.next
            if node.next is None and len(ladder) > 0:
                parent = ladder.pop()
                node.next = parent.next
                if parent.next is not None:
                    parent.next.prev = node
                if parent.child.prev is None:
                    parent.next = parent.child
                    parent.child.prev = parent
                else:
                    assert parent.child.prev == None, "parent.child points to a non-head!"
                parent.child = None
        return head
        
