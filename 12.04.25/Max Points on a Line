from collections import defaultdict

class Solution(object):
    def maxPoints(self, points):
        """
        :type points: List[List[int]]
        :rtype: int
        """
        def gcd(a, b):
            while b:
                a, b = b, a % b
            return a
        n = len(points)
        if n <= 2:
            return n

        max_points = 0

        for i in range(n):
            slopes = defaultdict(int)
            duplicates = 1
            x1, y1 = points[i]
            for j in range(n):
                if i == j:
                    continue
                x2, y2 = points[j]
                if x1 == x2 and y1 == y2:
                    duplicates += 1
                elif x1 == x2:
                    slopes[(float('inf'), 0)] += 1
                else:
                    dx = x2 - x1
                    dy = y2 - y1
                    g = gcd(dy, dx)
                    slope = (dy // g, dx // g)
                    slopes[slope] += 1
            current_max = duplicates
            if slopes:
                current_max += max(slopes.values())
            max_points = max(max_points, current_max)
        
        return max_points
        
