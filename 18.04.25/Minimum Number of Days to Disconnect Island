class Solution(object):
    def minDays(self, grid):
        """
        :type grid: List[List[int]]
        :rtype: int
        """
        def countIslands():
            visited=[[False]*n for _ in range(m)]
            islands=0
            def dfs(i,j):
                if i<0 or i>=m or j<0 or j>=n or grid[i][j]==0 or visited[i][j]:
                    return
                visited[i][j]=True
                dfs(i+1,j)
                dfs(i-1,j)
                dfs(i,j+1)
                dfs(i,j-1)
            for x in range(m):
                for y in range(n):
                    if grid[x][y]==1 and not visited[x][y]:
                        islands+=1
                        dfs(x,y)
            return islands
        m,n=len(grid),len(grid[0])
        if countIslands()!=1:
            return 0
        for x in range(m):
            for y in range(n):
                if grid[x][y]==1:
                    grid[x][y]=0
                    if countIslands()!=1:
                        return 1
                    grid[x][y]=1
        return 2
