class Solution(object):
    def findRedundantDirectedConnection(self, edges):
        """
        :type edges: List[List[int]]
        :rtype: List[int]
        """
        parent = {}
        candidate1 = None
        candidate2 = None
        
        # Step 1: Detect a node with two parents
        for u, v in edges:
            if v in parent:
                candidate1 = [parent[v], v]
                candidate2 = [u, v]
                break
            parent[v] = u
        
        # Helper function for Union-Find with path compression
        def find(uf, x):
            if uf[x] != x:
                uf[x] = find(uf, uf[x])
            return uf[x]
        
        # Step 2: Perform union-find to detect a cycle
        uf = {i: i for i in range(1, len(edges) + 1)}
        for u, v in edges:
            if [u, v] == candidate2:
                continue
            pu = find(uf, u)
            pv = find(uf, v)
            if pu == pv:
                if candidate1:
                    return candidate1
                return [u, v]
            uf[pv] = pu
        
        return candidate2
