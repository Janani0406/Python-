from collections import defaultdict
from typing import List

class Solution:
    def findLadders(self, beginWord: str, endWord: str, wordList: List[str]) -> List[List[str]]:
        word_set = set(wordList)
        if endWord not in word_set:
            return []

        cur_level = {beginWord}
        parents = defaultdict(list)

        while cur_level:
            word_set -= cur_level
            next_level = set()
            for word in cur_level:
                for i in range(len(word)):
                    for c in "abcdefghijklmnopqrstuvwxyz":
                        candidate = word[:i] + c + word[i + 1 :]
                        if candidate in word_set:
                            next_level.add(candidate)
                            parents[candidate].append(word)
            if endWord in next_level:
                break
            cur_level = next_level

        res = []

        def dfs(word, path):
            if word == beginWord:
                res.append(path[::-1])
                return
            for p in parents[word]:
                dfs(p, path + [p])

        dfs(endWord, [endWord])
        return res
