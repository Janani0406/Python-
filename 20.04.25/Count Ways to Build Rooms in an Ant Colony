class Solution(object):
    MOD = 10**9 + 7

    def waysToBuildRooms(self, prevRoom):
        """
        :type prevRoom: List[int]
        :rtype: int
        """
        from math import factorial
        
        n = len(prevRoom)
        # Adjacency list for the tree representation
        tree = [[] for _ in range(n)]
        
        # Build the tree based on the prevRoom array
        for i in range(1, n):
            tree[prevRoom[i]].append(i)
        
        # Precompute factorials and modular inverses up to n
        fact = [1] * (n + 1)
        inv_fact = [1] * (n + 1)
        
        def mod_inv(x, p):
            # Compute x^(p-2) % p using Fermat's little theorem
            return pow(x, p - 2, p)
        
        for i in range(2, n + 1):
            fact[i] = fact[i - 1] * i % self.MOD
        inv_fact[n] = mod_inv(fact[n], self.MOD)
        for i in range(n - 1, 0, -1):
            inv_fact[i] = inv_fact[i + 1] * (i + 1) % self.MOD
        
        # DFS to calculate the number of ways and subtree sizes
        def dfs(node):
            total_size = 1  # Size of current subtree including this node
            ways = 1  # Number of ways to build this subtree
            
            for child in tree[node]:
                child_ways, child_size = dfs(child)
                # Update the ways for the current subtree
                ways = ways * child_ways % self.MOD
                # Multiply by the multinomial coefficient
                ways = ways * inv_fact[child_size] % self.MOD
                total_size += child_size
            
            # Multiply by factorial of the total size - 1 for current ways
            ways = ways * fact[total_size - 1] % self.MOD
            
            return ways, total_size
        
        # Start DFS from the root node (room 0)
        result, _ = dfs(0)
        return result
